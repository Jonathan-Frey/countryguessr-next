generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  created_at               String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
}

model Game {
  id                 Int     @id @default(autoincrement())
  date               String
  image              String
  hints              Hint[] // Relation to multiple hints
  category           String // Category of the game
  correctCountry     Country @relation(fields: [countryId], references: [id])
  countryId          Int // Foreign key for Country
  product            String
  ProductInformation String  @db.Text

  @@unique([date, category])
}

model Hint {
  id      Int    @id @default(autoincrement())
  unlock  Int
  content String @db.Text
  gameId  Int?
  Game    Game?  @relation(fields: [gameId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Country Model Definition
model Country {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  abbreviation String
  smallFlag    String
  mediumFlag   String
  largeFlag    String
  latitude     Float
  longitude    Float
  borders      CountryBorder[] @relation("CountryBorders")
  borderedBy   CountryBorder[] @relation("BorderedBy")
  games        Game[]
}

model CountryBorder {
  countryId       Int
  borderCountryId Int

  country       Country @relation("CountryBorders", fields: [countryId], references: [id])
  borderCountry Country @relation("BorderedBy", fields: [borderCountryId], references: [id])

  @@id([countryId, borderCountryId])
}

model Image {
  id          Int    @id @default(autoincrement())
  contentType String
  data        Bytes
}
